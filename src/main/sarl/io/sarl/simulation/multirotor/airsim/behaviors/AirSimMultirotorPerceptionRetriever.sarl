/** 
 * 
 */
package io.sarl.simulation.multirotor.airsim.behaviors

import io.sarl.core.DefaultContextInteractions
import io.sarl.lang.core.Address
import io.sarl.simulation.capacities.PropagatePerceptionsCapacity
import io.sarl.simulation.multirotor.behaviors.AbstractMultirotorPerceptionRetriever
import io.sarl.simulation.multirotor.perceptions.MultirotorStatePerception
import io.sarl.simulation.multirotor.perceptions.PosePerception
import io.sarl.simulation.multirotor.perceptions.GroundTruthKinematicsPerception
import io.sarl.simulation.multirotor.capacities.MultirotorSimulationPerceptionCapacity

/** 
 * Perception retriever behavior
 * @author Alexandre Lombard
 * 
 */
behavior AirSimMultirotorPerceptionRetriever extends AbstractMultirotorPerceptionRetriever {
	uses DefaultContextInteractions
	
	uses MultirotorSimulationPerceptionCapacity
	uses PropagatePerceptionsCapacity
	

	/** Retrieve the perceptions for a single agent
	 */
	override retrieveAgentPerceptions(address : Address, name : String) {
		val state = name.multirotorState
		val pose = name.getObjectPose
		val kinematics = name.getGroundTruthKinematics
		
		propagatePerception(address) [
			emit(new MultirotorStatePerception(state))[it == address]
			emit(new PosePerception(pose))[it == address]
			emit(new GroundTruthKinematicsPerception(kinematics))[it == address]
		]
	}
	
}
